*******************************************************************************
- History of HTML
*******************************************************************************
 HTML as a markup language is basically used to annotate the electronic
 document (the text) to specify how something is displayed or what something
 means. The term originated in typesetting where proofs were marked up with
 instruction on how they should visually appear. Typesetting is a composition
 of text done by arranging physical type in mechanical systems or glyphs in
 digital systems representing characters. The term was then broadened to
 include the semantic perspective too. HTML originated from the ENQUIRE,
 proposed and prototyped by Tim Berners-Lee, a contractor at CERN, as a system
 for CERN researchers to use and share documents. Later, Berners-Lee wrote a
 memo proposing Internet-based hypertext system. He specified HTML and wrote
 the browser and server software in late 1990. First publicly available
 description of HTML was a document called 'HTML Tags' which described 18
 elements compromising the initial design of HTML. Except for the hyperlink
 tag, these were strongly influenced by SGMLguid, an in-house 'Standard
 Generalized Markup Language (SGML)'-based documentation format at CERN. Eveln
 of these elements still exist in HTML 4.

*******************************************************************************
- HTML Tags, Elements and Attributes
*******************************************************************************
 HTML tags are used to hold the HTML element. HTML element holds the content.
 HTML attributes are used to describe the characteristic of an HTML element in
 detail. Whatever written within a HTML tag are HTML elements.

 HTML Tags: Tags are the starting and ending parts of an HTML element. They
 begin with < symbol and end with > symbol - the symbols are called the angle
 brackets and the end tag alwalys has the slash after the opening angle
 bracket. Whatever written inside < and > are called tags. Example:<b> </b>

 HTML Elements: Elements enclose the contents in between the tags. They consist
 of some kind of structure or expression. It generally consists of a start tag,
 content and an end tag. If <b> is the starting tag and </b> is the ending tag,
 this would be an example: <b>This is the content.</b

 HTML Attributes: It is used to define the character of an HTML element. It is
 always placed in the opening tag of an element. It generally provides
 additional styling (attribute) to the element. For example: <p align='center'>
 This is paragraph.</p>

 To recap: HTML tags are used to hold the HTML element. HTML element holds the
 content and the HTML attribute described the characteristics of the HTML
 element.

*******************************************************************************
- What does HTML <b> element stands for?
*******************************************************************************
 It's not bold element but the 'Bring Attention To' element. This was formerly
 known as the Boldface element, and most browsers still draw the text in
 boldface. However, you should not use <b> for styling text; instead, you
 should use CSS font-weight property to create boldface text, or the <strong>
 element to indicate that text is of special importance.

*******************************************************************************
- HTML 'block level' and 'inline level' elements
*******************************************************************************
 HTML (HyperText Markup Language) elements historically were categorized as
 either 'block-level' elements or 'inline-level' elements. Since this is a
 presentational characteristic it is nowadays specified by CSS in the Flow
 Layout.

 A block-level element always starts on a new line, and the browsers
 automatically add some space (a margin) before and after the element.

 An inline element does not start on a new line. An inline element only takes
 up as much width as necessary.

 So in short, inline elements fit in alongside other elements and block level
 elements take up a whole 'block' of space.

 Here are the block-level elements in HTML: <address> <article> <aside>
 <blockquote> <canvas> <dd> <div> <dl> <dt> <fieldset> <figcaption> <figure>
 <footer> <form> <h1> -<h6> <header> <hr> <li> <main> <nav> <noscript> <ol> <p>
 <pre> <section> <table> <tfoot> <ul> <video>

 Here are the inline elements in HTML:
 <a><abbr><acronym><b><bdo><big><br><button><cite><code><dfn><em><i><img><input>
 kbd><label><map><object><output><q><samp><script><select><small><span><strong>
 <sub><sup><textarea><time><tt><var>

*******************************************************************************
- HTML section heading elements
*******************************************************************************
 <h1> to <h6> represent six levels of section headings. <h1> is the highest
 section level and <h6> is the lowest.

 Very important method or an important structure is to have only one <h1> at
 most on a page and it should always be the top level main heading.

 You should never have <h3> without <h2>, <h4> without <h3> etc...

 Never use them for size.

*******************************************************************************
- Is it possible to create HTML tags h7, h8, h9 and so on?
*******************************************************************************
 The HTML specification defines six headings. Browsers recognize six headings.
 If you start using <h7> and so on, then you'll be using an invalid element.

 Generally speaking, you can create as many headings as you want, but they must
 be defined as classes. So if you are looking at making more than six headings
 for organization purposes do something like:

 .h7 {
     color: #111111;
     font-size: 16px;
     text-transform: uppercase;
  }

 <p class="h7"> I'm an extra heading </p>

*******************************************************************************
- What is and how does HTML skeleton or HTML boilerplate look like
*******************************************************************************
 It's a standardized markup that needs to go in every document you create,
 every single HTML page.

 <!DOCTYPE html>
 <html>
 <head>
 	<title>Document</title>
 </head>
 <body>
 	<!-- Content Goes Here -->
 </body>
 </html>

 or more complicated version:

 <!DOCTYPE html>
 <html lang="en">
 <head>
 	<meta charset="UTF-8">
 	<meta http-equiv="X-UA-Compatible" content="IE=edge">
 	<meta name="viewport" content="width=device-width, initial-scale=1.0">
 	<title>Document</title>
 </head>
 <body>
 	<!-- Content Goes Here -->
 </body>
 </html>

 To create more complicated version in Visual Studio Code, type ! and press
 'Tab'

 DOCTYPE preamble
 --------------------------------------
 A DOCTYPE is a required preamble. A flag to the browser that we are using
 HTML5. In HTML, the doctype is the required '<!DOCTYPE html>' preamble found
 at the top of all documents. Its sole purpose is to prevent a browser from
 switching into so-called 'quirks mode' when rendering a document; that is, the
 '<!DOCTYPE html>' doctype ensures that the browser makes a best-effort attempt
 at following the relevant specifications, rather than using a different
 rendering mode that is incompatible with some specifications.
 (https://html.spec.whatwg.org/multipage/syntax.html#the-doctype)

 The HTML Document / Root element
 --------------------------------------
 The <html> element represents the root (top-level element) of an HTML
 document, so it is also referred to as the root element. All other elements
 must be descendants of this element.

 The Document Metadata (Header) element
 --------------------------------------
 The <head> HTML element contains machine-readable information (metadata) about
 the document, like its title, scripts, and style sheets.

 The Document Title element
 --------------------------------------
 Element whose only permitted parent is the <head> element that contains no
 other <title> element. The <title> HTML element defines the document's title
 that is shown in a browser's title bar or a page's tab. It only contains text;
 tags within the element are ignored.

 The Document Body element
 -------------------------
 The <body> HTML element represents the content of an HTML document. There can
 be only one <body> element in a document.

*******************************************************************************
- Explain the flag <!DOCTYPE html>
*******************************************************************************
 https://html.spec.whatwg.org/multipage/syntax.html#the-doctype

 DOCTYPEs are required for legacy reasons. When omitted, browsers tend to use a
 different rendering mode that is incompatible with some specifications.
 Including the DOCTYPE in a document ensures that the browser makes a
 best-effort attempt at following the relevant specifications.

 ---------------------------------------------------------------------------

 A DOCTYPE must consist of the following components, in this order:

 	- A string that is an ASCII case-insensitive match for the string
 	  "<!DOCTYPE".
 	- One or more ASCII whitespace.
 	- A string that is an ASCII case-insensitive match for the string "html".
 	- Optionally, a DOCTYPE legacy string.
 	- Zero or more ASCII whitespace.
 	- A U+003E GREATER-THAN SIGN character (>).

 In other words, <!DOCTYPE html>, case-insensitively.

 ---------------------------------------------------------------------------

 For the purposes of HTML generators that cannot output HTML markup with the
 short DOCTYPE '<!DOCTYPE html>', a DOCTYPE legacy string may be inserted into
 the DOCTYPE (in the position defined above). This string must consist of:

 - One or more ASCII whitespace.
 - A string that is an ASCII case-insensitive match for the string "SYSTEM".
 - One or more ASCII whitespace.
 - A U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (the quote mark).
 - The literal string "about:legacy-compat".
 - A matching U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (i.e. the
   same character as in the earlier step labeled quote mark).

 In other words, <!DOCTYPE html SYSTEM "about:legacy-compat"> or <!DOCTYPE html
 SYSTEM 'about:legacy-compat'>, case-insensitively except for the part in
 single or double quotes.

 The DOCTYPE legacy string should not be used unless the document is generated
 from a system that cannot output the shorter string.

 To help authors transition from HTML4 and XHTML1, an obsolete permitted
 DOCTYPE string can be inserted into the DOCTYPE (in the position defined
 above). This string must consist of:

 - One or more space characters.
 - A string that is an ASCII case-insensitive match for the string "PUBLIC".
 - One or more space characters.
 - A U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (the first quote
   mark).
 - The string from one of the cells in the first column of the table below.
   The - row to which this cell belongs is the selected row.
 - A matching U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (i.e. the
   same - character as in the earlier step labeled first quote mark).
 - If a system identifier is used,
 	- One or more space characters.
 	- A U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (the third quote
 	  mark).
 	- The string from the cell in the second column of the selected row.
 	- A matching U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (i.e.
 	  the same character as in the earlier step labeled third quote mark).
 	- Allowed values for public and system identifiers in an obsolete
 	  permitted DOCTYPE string.

 ┌────────────────────────────────┬─────────────────────────────────────────────────┬───────────────────────────┐
 │Public identifier               │System identifier                                │System identifier optional?│
 ├────────────────────────────────┼─────────────────────────────────────────────────┼───────────────────────────┤
 │-//W3C//DTD HTML 4.0//EN        │http://www.w3.org/TR/REC-html40/strict.dtd       │Yes                        │
 │-//W3C//DTD HTML 4.01//EN       │http://www.w3.org/TR/html4/strict.dtd            │Yes                        │
 │-//W3C//DTD XHTML 1.0 Strict//EN│http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd│No                         │
 │-//W3C//DTD XHTML 1.1//EN       │http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd     │No                         │
 └────────────────────────────────┴─────────────────────────────────────────────────┴───────────────────────────┘

 ---------------------------------------------------------------------------

 What is the DOCTYPE legacy string for?

 This was primarily for XSLT. XSLT is perfectly capable of producing HTML5,
 except that in XSLT 1.0 at least, it has no means of describing 'output
 <!DOCTYPE html>', so the DOCTYPE legacy string allows XSLT to output valid
 HTML5.

 The phrasing in the spec is just a generified way of permitting that.

 ---------------------------------------------------------------------------

 In HTML5, <!DOCTYPE html> is one of the allowed doctype declarations. And it
 is the recommended one. Note that it's case INsensitive in HTML5.

 Still, if you are absolutely forced to use something similar to HTML4/XHTML,
 you may use the legacy-compatible doctype:

 <!DOCTYPE html SYSTEM "about:legacy-compat">

 This may be the case if you use some software or framework to generate your
 HTML5 documents.

 If you are just authoring new HTML5 documents, you are encouraged to just use
 <!DOCTYPE html>.

*******************************************************************************
- HTML Lists
*******************************************************************************
 <ul> stands for unordered list (bullet points, bulleted list) and <ol> stands
 for ordered (numbered) list. The <li> HTML element is used to represent an
 item in a list.

 ---------------------------------------------------------------------------

 The <ul> HTML element represents an unordered list of items, typically
 rendered as a bulleted list. The <ul> element is for grouping a collection of
 items that do not have a numerical ordering, and their order in the list is
 meaningless. Typically, unordered-list items are displayed with a bullet,
 which can be of several forms, like a dot, a circle, or a square. The bullet
 style is not defined in the HTML description of the page, but in its
 associated CSS, using the list-style-type property.

 The <ul> and <ol> elements may be nested as deeply as desired. Moreover, the
 nested lists may alternate between <ol> and <ul> without restriction. The <ol>
 and <ul> elements both represent a list of items. They differ in that, with
 the <ol> element, the order is meaningful. To determine which one to use, try
 changing the order of the list items; if the meaning is changed, the <ol>
 element should be used, otherwise you can use <ul>.

 Attributes (global attributes) of the <ul> element:

 compact (Deprecated, Non-standard)
 ----------------------------------
 This Boolean attribute hints that the list should be rendered in a compact
 style. The interpretation of this attribute depends on the user agent, and it
 doesn't work in all browsers.

 Warning: Do not use this attribute, as it has been deprecated: use CSS
 instead. To give a similar effect as the compact attribute, the CSS property
 line-height can be used with a value of 80%.

 type (Deprecated Non-standard)
 ----------------------------------
 This attribute sets the bullet style for the list. The values defined under
 HTML3.2 and the transitional version of HTML 4.0/4.01 are:

 - circle
 - disc
 - square
 - triangle (a fourth bullet type has been defined in the WebTV interface,
   but not all browsers support it)

 If not present and if no CSS list-style-type property applies to the element,
 the user agent selects a bullet type depending on the nesting level of the
 list.

 Warning: Do not use this attribute, as it has been deprecated; use the CSS
 list-style-type property instead.

 ---------------------------------------------------------------------------

 The <ol> HTML element represents an ordered list of items — typically rendered
 as a numbered list (or letter).

 Attributes (global attributes) of the <ol> element:

 reversed
 --------
 This Boolean attribute specifies that the list's items are in reverse order.
 Items will be numbered from high to low.

 start
 --------
 An integer to start counting from for the list items. Always an Arabic numeral
 (1, 2, 3, etc.), even when the numbering type is letters or Roman numerals.
 For example, to start numbering elements from the letter "d" or the Roman
 numeral "iv," use start="4".

 type
 --------
 Sets the numbering type:

 - a for lowercase letters
 - A for uppercase letters
 - i for lowercase Roman numerals
 - I for uppercase Roman numerals
 - 1 for numbers (default)
 The specified type is used for the entire list unless a different type
 attribute is used on an enclosed <li> element.

 Note: Unless the type of the list number matters (like legal or technical
 documents where items are referenced by their number/letter), use the CSS
 list-style-type property instead.

 ---------------------------------------------------------------------------

 The <li> HTML element is used to represent an item in a list. It must be
 contained in a parent element: an ordered list (<ol>), an unordered list
 (<ul>), or a menu (<menu>). In menus and unordered lists, list items are
 usually displayed using bullet points. In ordered lists, they are usually
 displayed with an ascending counter on the left, such as a number or letter.

 Attributes (global attributes) of the <il> element:

 value
 -------------------------------
 This integer attribute indicates the current ordinal value of the list item as
 defined by the <ol> element. The only allowed value for this attribute is a
 number, even if the list is displayed with Roman numerals or letters. List
 items that follow this one continue numbering from the value set. The value
 attribute has no meaning for unordered lists (<ul>) or for menus (<menu>).

 type (Deprecated, Non-standard)
 -------------------------------
 This character attribute indicates the numbering type:

 - a: lowercase letters
 - A: uppercase letters
 - i: lowercase Roman numerals
 - I: uppercase Roman numerals
 - 1: numbers
 This type overrides the one used by its parent <ol> element, if any.

 Note: This attribute has been deprecated; use the CSS list-style-type property
 instead.

*******************************************************************************
- HTML Content categories
*******************************************************************************
 Most HTML elements are a member of one or more content categories — these
 categories group elements that share common characteristics. This is a loose
 grouping (it doesn't actually create a relationship among elements of these
 categories), but they help define and describe the categories' shared behavior
 and their associated rules, especially when you come upon their intricate
 details. It's also possible for elements to not be a member of any of these
 categories.

 There are three types of content categories:

 - Main content categories, which describe common rules shared by many
   elements.

 - Form-related content categories, which describe rules common to form-related
   elements.

 - Specific content categories, which describe rare categories shared only by a
   few elements, sometimes only in a specific context.


 Palpable content
 -----------------
 Content is palpable when it's neither empty nor hidden; it is content that is
 rendered and is substantive. Elements whose model is flow content should have
 at least one node which is palpable.

*******************************************************************************
- What does "href" stand for?
*******************************************************************************
 "href" stands for hypertext reference. The href attribute specifies the
 link's destination:
 <a href="https://www.google.com">Google</a>

*******************************************************************************
- How do you disable HTML5
*******************************************************************************
 You don’t “disable” HTML 5. HTML5 is a version of the markup language called
 HTML. HTML5 also the term used to identify a whole slew of JavaScript APIs
 that were added to the browser at the same time of the release. HTML5 isn’t a
 “program” that you can optionally enable.

 You enable HTML5 by declaring the doctype at the top of your HTML document, in
 the very first line: <!DOCTYPE html>

 If you wanted a previous version of HTML, that’s a case of declaring the
 appropriate doctype:
 HTML 4.01 Strict:
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
                       "http://www.w3.org/TR/html4/strict.dtd">

 HTML 4.01 Transitional:
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
                       "http://www.w3.org/TR/html4/loose.dtd">

 XHTML 1.0 Strict:
 <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
                       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

 But, caution!

 A doctype informs the browser of the type of markup it should expect. This
 doesn’t “turn off” any “HTML5 APIs” to my knowledge. It also doesn’t affect
 the version of JavaScript or your CSS features. You are merely informing
 browser what markup it should expect.

*******************************************************************************
- Explain <div> and <span> elements
*******************************************************************************
 <div>: The Content Division element
 A block level element ,the <div> HTML element is the generic container for
 flow content. It has no effect on the content or layout until styled in some
 way using CSS (e.g. styling is directly applied to it, or some kind of layout
 model like Flexbox is applied to its parent element).

 <span>: The Content Span element
 The <span> HTML element is a generic inline container for phrasing content,
 which does not inherently represent anything. It can be used to group elements
 for styling purposes (using the class or id attributes), or because they share
 attribute values, such as lang. It should be used only when no other semantic
 element is appropriate. <span> is very much like a <div> element, but <div> is
 a block-level element whereas a <span> is an inline element.

*******************************************************************************
- Explain <hr>, <br>, <sup> and <sub> elements
*******************************************************************************
 <hr>: The Thematic Break (Horizontal Rule) element
 The <hr> HTML element represents a thematic break between paragraph-level
 elements: for example, a change of scene in a story, or a shift of topic
 within a section.

 <br>: The Line Break element
 The <br> HTML element produces a line break in text (carriage-return). It is
 useful for writing a poem or an address, where the division of lines is
 significant.

 <sup>: The Superscript element
 The <sup> HTML element specifies inline text which is to be displayed as
 superscript for solely typographical reasons. Superscripts are usually
 rendered with a raised baseline using smaller text.

 <sub>: The Subscript element
 The <sub> HTML element specifies inline text which should be displayed as
 subscript for solely typographical reasons. Subscripts are typically rendered
 with a lowered baseline using smaller text.

*******************************************************************************
- HTML Entities
*******************************************************************************
 Example:
 &#9824;

 - Start with an ampersand and end with a semicolon

 - Used to display reserved characters, that normal would be invalid

 - Also used in place of difficult to type characters

 - The browser interprets them and renders the correct character instead.

*******************************************************************************
- Semantic Markup
*******************************************************************************
 Semantic Markup refers to marking up documents in ways that provide
 information about the content itself rather than information about the visual
 styling of the content. It is critical to ensure that assistive technology
 users can understand your document.

 The term semantic itself independent of code or HTML just means something
 relating to meaning. So semantic markup is meaningful markup or markup that
 relates or pertains to the meaning of the content of that element.

 So basically, the semantic markup answers the question of 'what role or
 purpose does this HTML element have'.

*******************************************************************************
- Explain the <main> element
*******************************************************************************
 The <main> HTML element represents the dominant content of the <body> of a
 document. The main content area consists of content that is directly related
 to or expands upon the central topic of a document, or the central
 functionality of an application.

 The content of a <main> element should be unique to the document. Content that
 is repeated across a set of documents or document sections such as sidebars,
 navigation links, copyright information, site logos, and search forms
 shouldn't be included unless the search form is the main function of the page.

 <main> doesn't contribute to the document's outline; that is, unlike elements
 such as <body>, headings such as <h2>, and such, <main> doesn't affect the
 DOM's concept of the structure of the page. It's strictly informative.

*******************************************************************************
- Explain the <nav> element
*******************************************************************************
 <nav>: The Navigation Section element

 The <nav> HTML element represents a section of a page whose purpose is to
 provide navigation links, either within the current document or to other
 documents. Common examples of navigation sections are menus, tables of
 contents, and indexes.

 Usage notes:
 - It's not necessary for all links to be contained in a <nav> element. <nav>
   is intended only for a major block of navigation links; typically the
   <footer> element often has a list of links that don't need to be in a <nav>
   element.

 - A document may have several <nav> elements, for example, one for site
   navigation and one for intra-page navigation. aria-labelledby can be used in
   such case to promote accessibility, see example.

 - User agents, such as screen readers targeting disabled users, can use this
   element to determine whether to omit the initial rendering of
   navigation-only content.

*******************************************************************************
- Explain the <section> element
*******************************************************************************
 <section>: The Generic Section element

 The <section> HTML element represents a generic standalone section of a
 document, which doesn't have a more specific semantic element to represent it.
 Sections should always have a heading, with very few exceptions.

 As mentioned above, <section> is a generic sectioning element, and should only
 be used if there isn't a more specific element to represent it. As an example,
 a navigation menu should be wrapped in a <nav> element, but a list of search
 results or a map display and its controls don't have specific elements, and
 could be put inside a <section>.

 Also consider these cases:

 - If the contents of the element represent a standalone, atomic unit of
   content that makes sense syndicated as a standalone piece (e.g. a blog post
   or blog comment, or a newspaper article), the <article> element would be a
   better choice.

 - If the contents represent useful tangential information that works alongside
   the main content, but is not directly part of it (like related links, or an
   author bio), use an <aside>.

 - If the contents represent the main content area of a document, use <main>.

 - If you are only using the element as a styling wrapper, use a <div> instead.

 To reiterate, each <section> should be identified, typically by including a
 heading (<h1> - <h6> element) as a child of the <section> element, wherever
 possible.

 Circumstances where you might see <section> used without a heading are
 typically found in web application/UI sections rather than in traditional
 document structures. In a document, it doesn't really make any sense to have a
 separate section of content without a heading to describe its contents. Such
 headings are useful for all readers, but particularly useful for users of
 assistive technologies like screen readers, and they are also good for SEO.

 -------------------------------------
 Consider however a secondary navigation mechanism. If the global navigation is
 already wrapped in a <nav> element, you could conceivably wrap a previous/next
 menu in a <section>:

 <section>
   <a href="#">Previous article</a>
   <a href="#">Next article</a>
 </section>

 -------------------------------------
 Or what about some kind of button bar for controlling your app? This might not
 necessarily want a heading, but it is still a distinct section of the
 document:

 <section>
   <button class="reply">Reply</button>
   <button class="reply-all">Reply to all</button>
   <button class="fwd">Forward</button>
   <button class="del">Delete</button>
 </section>

 -------------------------------------
 Make sure to use some assistive technology and screen-reader-friendly CSS to
 hide it, like so:

 .hidden {
   position: absolute;
   top: -9999px;
   left: -9999px;
 }

 -------------------------------------
 Depending on the content, including a heading could also be good for SEO, so
 it is an option to consider.

*******************************************************************************
- Explain the <article> element
*******************************************************************************
 The <article> HTML element represents a self-contained composition in a
 document, page, application, or site, which is intended to be independently
 distributable or reusable (e.g., in syndication). Examples include: a forum
 post, a magazine or newspaper article, or a blog entry, a product card, a
 user-submitted comment, an interactive widget or gadget, or any other
 independent item of content.

 A given document can have multiple articles in it; for example, on a blog that
 shows the text of each article one after another as the reader scrolls, each
 post would be contained in an <article> element, possibly with one or more
 <section>s within.

 Each <article> should be identified, typically by including a heading (<h1> -
 <h6> element) as a child of the <article> element.

 When an <article> element is nested, the inner element represents an article
 related to the outer element. For example, the comments of a blog post can be
 <article> elements nested in the <article> representing the blog post.

 Author information of an <article> element can be provided through the
 <address> element, but it doesn't apply to nested <article> elements.

 The publication date and time of an <article> element can be described using
 the datetime attribute of a <time> element.


 <article class="film_review">
   <h2>Jurassic Park</h2>
   <section class="main_review">
     <h3>Review</h3>
     <p>Dinos were great!</p>
   </section>
   <section class="user_reviews">
     <h3>User reviews</h3>
     <article class="user_review">
       <h4>Too scary!</h4>
       <p>Way too scary for me.</p>
       <footer>
         <p>
           Posted on
           <time datetime="2015-05-16 19:00">May 16</time>
           by Lisa.
         </p>
       </footer>
     </article>
     <article class="user_review">
       <h4>Love the dinos!</h4>
       <p>I agree, dinos are my favorite.</p>
       <footer>
         <p>
           Posted on
           <time datetime="2015-05-17 19:00">May 17</time>
           by Tom.
         </p>
       </footer>
     </article>
   </section>
   <footer>
     <p>
       Posted on
       <time datetime="2015-05-15 19:00">May 15</time>
       by Staff.
     </p>
   </footer>
 </article>

*******************************************************************************
- Explain the <address> element
*******************************************************************************
 The <address> HTML element indicates that the enclosed HTML provides contact
 information for a person or people, or for an organization.

 The contact information provided by an <address> element's contents can take
 whatever form is appropriate for the context, and may include any type of
 contact information that is needed, such as a physical address, URL, email
 address, phone number, social media handle, geographic coordinates, and so
 forth. The <address> element should include the name of the person, people, or
 organization to which the contact information refers.

 <address> can be used in a variety of contexts, such as providing a business's
 contact information in the page header, or indicating the author of an article
 by including an <address> element within the <article>.

 The <address> element can only be used to represent the contact information
 for its nearest <article> or <body> element ancestor.

 This element should not contain more information than the contact information,
 like a publication date (which belongs in a <time> element).

 Typically an <address> element can be placed inside the <footer> element of
 the current section, if any.

 <address>
   You can contact author at
   <a href="http://www.somedomain.com/contact"> www.somedomain.com</a>.<br />
   If you see any bugs, please
   <a href="mailto:webmaster@somedomain.com"> contact webmaster</a>.<br />
   You may also want to visit us:<br />
   Mozilla Foundation<br />
   331 E Evelyn Ave<br />
   Mountain View, CA 94041<br />
   USA
 </address>

*******************************************************************************
- Explain the <aside> element
*******************************************************************************
 The <aside> HTML element represents a portion of a document whose content is
 only indirectly related to the document's main content. Asides are frequently
 presented as sidebars or call-out boxes.

 Do not use the <aside> element to tag parenthesized text, as this kind of text
 is considered part of the main flow.

 <article>
   <p>
     The Disney movie <cite>The Little Mermaid</cite> was first released to
     theatres in 1989.
   </p>
   <aside>
     <p>The movie earned $87 million during its initial release.</p>
   </aside>
   <p>More info about the movie…</p>
 </article>

*******************************************************************************
- Explain the <header> element
*******************************************************************************
 The <header> HTML element represents introductory content, typically a group
 of introductory or navigational aids. It may contain some heading elements but
 also a logo, a search form, an author name, and other elements.

 The <header> element has an identical meaning to the site-wide banner landmark
 role, unless nested within sectioning content. Then, the <header> element is
 not a landmark.

 The <header> element can define a global site header, described as a banner in
 the accessibility tree. It usually includes a logo, company name, search
 feature, and possibly the global navigation or a slogan. It is generally
 located at the top of the page.

 Otherwise, it is a section in the accessibility tree, and usually contain the
 surrounding section's heading (an h1 – h6 element) and optional subheading,
 but this is not required.

 Historical Usage
 The <header> element originally existed at the very beginning of HTML for
 headings. It is seen in the very first website. At some point, headings became
 <h1> through <h6>, allowing <header> to be free to fill a different role.

*******************************************************************************
- Explain the <footer> element
*******************************************************************************
 The <footer> HTML element represents a footer for its nearest ancestor
 sectioning content or sectioning root element. A <footer> typically contains
 information about the author of the section, copyright data or links to
 related documents.

 Usage notes:
 - Enclose information about the author in an <address> element that can be
   included into the <footer> element.

 - When the nearest ancestor sectioning content or sectioning root element is
   the body element the footer applies to the whole page.

 - The <footer> element is not sectioning content and therefore doesn't
   introduce a new section in the outline.

*******************************************************************************
- Explain the <time> element
*******************************************************************************
 The <time> HTML element represents a specific period in time. It may include
 the datetime attribute to translate dates into machine-readable format,
 allowing for better search engine results or custom features such as
 reminders.

 It may represent one of the following:

 - A time on a 24-hour clock. A precise date in the Gregorian calendar (with
 - optional time and timezone information). A valid time duration.

 This element is for presenting dates and times in a machine-readable format.
 For example, this can help a user agent offer to add an event to a user's
 calendar.

 This element should not be used for dates prior to the introduction of the
 Gregorian calendar (due to complications in calculating those dates).

 The datetime value (the machine-readable value of the datetime) is the value
 of the element's datetime attribute, which must be in the proper format (see
 below). If the element does not have a datetime attribute, it must not have
 any element descendants, and the datetime value is the element's child text
 content.

 <p>The Cure will be celebrating their 40th anniversary on <time
 datetime="2018-07-07">July 7</time> in London's Hyde Park.</p>

 <p>The concert starts at <time datetime="20:00">20:00</time> and you'll be
 able to enjoy the band for at least <time datetime="PT2H30M">2h
 30m</time>.</p>


 Valid datetime values:

 a valid year string
 2011

 a valid month string
 2011-11

 a valid date string
 2011-11-18

 a valid yearless date string
 11-18

 a valid week string
 2011-W47

 a valid time string
 14:54

 14:54:39

 14:54:39.929

 a valid local date and time string
 2011-11-18T14:54:39.929

 2011-11-18 14:54:39.929

 a valid global date and time string
 2011-11-18T14:54:39.929Z

 2011-11-18T14:54:39.929-0400

 2011-11-18T14:54:39.929-04:00

 2011-11-18 14:54:39.929Z

 2011-11-18 14:54:39.929-0400

 2011-11-18 14:54:39.929-04:00

 a valid duration string
 PT4H18M3S

*******************************************************************************
- Explain the <figure> element
*******************************************************************************
 The <figure> HTML element represents self-contained content, potentially with
 an optional caption, which is specified using the <figcaption> element. The
 figure, its caption, and its contents are referenced as a single unit.

 <figure>
     <img src="/media/cc0-images/elephant-660-480.jpg"
          alt="Elephant at sunset">
     <figcaption>An elephant at sunset</figcaption>
 </figure>

 Usually a <figure> is an image, illustration, diagram, code snippet, etc.,
 that is referenced in the main flow of a document, but that can be moved to
 another part of the document or to an appendix without affecting the main
 flow.

 A caption can be associated with the <figure> element by inserting a
 <figcaption> inside it (as the first or the last child). The first
 <figcaption> element found in the figure is presented as the figure's
 caption.

<!--

*******************************************************************************
- List of type attributes for the <input> element:
*******************************************************************************
 button
 ---------------
 A push button with no default behavior displaying the value of the value
 attribute, empty by default.


 checkbox
 ---------------
 A check box allowing single values to be selected/deselected.


 color
 ---------------
 A control for specifying a color; opening a color picker when active in
 supporting browsers.


 date
 ---------------
 A control for entering a date (year, month, and day, with no time). Opens a date
 picker or numeric wheels for year, month, day when active in supporting
 browsers.


 ---------------
 datetime-local
 A control for entering a date and time, with no time zone. Opens a date picker
 or numeric wheels for date- and time-components when active in supporting
 browsers.


 email
 ---------------
 A field for editing an email address. Looks like a text input, but has
 validation parameters and relevant keyboard in supporting browsers and devices
 with dynamic keyboards.


 file
 ---------------
 A control that lets the user select a file. Use the accept attribute to define
 the types of files that the control can select.


 hidden
 ---------------
 A control that is not displayed but whose value is submitted to the server.
 There is an example in the next column, but it's hidden!


 image
 ---------------
 A graphical submit button. Displays an image defined by the src attribute. The
 alt attribute displays if the image src is missing.


 month
 ---------------
 A control for entering a month and year, with no time zone.


 number
 ---------------
 A control for entering a number. Displays a spinner and adds default validation.
 Displays a numeric keypad in some devices with dynamic keypads.


 password
 ---------------
 A single-line text field whose value is obscured. Will alert user if site is not
 secure.


 radio
 ---------------
 A radio button, allowing a single value to be selected out of multiple choices
 with the same name value.


 range
 ---------------
 A control for entering a number whose exact value is not important. Displays as
 a range widget defaulting to the middle value. Used in conjunction min and max
 to define the range of acceptable values.


 reset
 ---------------
 A button that resets the contents of the form to default values. Not
 recommended.


 search
 ---------------
 A single-line text field for entering search strings. Line-breaks are
 automatically removed from the input value. May include a delete icon in
 supporting browsers that can be used to clear the field. Displays a search icon
 instead of enter key on some devices with dynamic keypads.


 submit
 ---------------
 A button that submits the form.


 tel
 ---------------
 A control for entering a telephone number. Displays a telephone keypad in some
 devices with dynamic keypads.


 text
 ---------------
 The default value. A single-line text field. Line-breaks are automatically
 removed from the input value.


 time
 ---------------
 A control for entering a time value with no time zone.


 url
 ---------------
 A field for entering a URL. Looks like a text input, but has validation
 parameters and relevant keyboard in supporting browsers and devices with dynamic
 keyboards.


 week
 ---------------
 A control for entering a date consisting of a week-year number and a week number
 with no time zone.

